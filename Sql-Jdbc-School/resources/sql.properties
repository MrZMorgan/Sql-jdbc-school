create.course = INSERT INTO courses (name) VALUES ('%s');
get.courses.list = SELECT * FROM courses;
get.groups.list = SELECT * FROM groups;
get.students.list = SELECT * FROM students;
get.students.courses.list = SELECT * FROM students_courses;
create.group = INSERT INTO groups (name) VALUES ('%s');
get.groups.by.size = SELECT group_id, COUNT (*) AS count FROM students GROUP BY group_id HAVING COUNT(*) <= %d ORDER BY group_id;\n
create.student = INSERT INTO students (first_name, last_name) VALUES ('%s', '%s');
delete.student.by.id = DELETE FROM students WHERE id = %d;
delete.course.by.id = DELETE FROM courses WHERE id = %d;
delete.group.by.id = DELETE FROM courses WHERE id = %d;
delete.from.students.courses.by.student.id = DELETE FROM students_courses WHERE student_id = %d;
assign.student.to.group = UPDATE students SET group_id = %d WHERE id = %d;
update.course.name = UPDATE courses SET name = %s WHERE id = %d;
update.group.name = UPDATE groups SET name = %s WHERE id = %d;
create.student.to.course = INSERT INTO students_courses (student_id , course_id) VALUES (%d, %d);
delete.from.course = DELETE FROM students_courses WHERE student_id = %d AND course_id = %d;
get.students.to.courses = SELECT first_name, last_name FROM students JOIN students_courses ON students.id = students_courses.student_id JOIN courses ON students_courses.course_id = courses.id WHERE name = '%s';
drop.groups.table = DROP TABLE groups;
create.groups.table = CREATE TABLE groups (id SERIAL NOT NULL PRIMARY KEY, name VARCHAR(50) NOT NULL);
drop.courses.table = DROP TABLE if exists courses cascade;
create.courses.table = CREATE TABLE courses (id SERIAL NOT NULL PRIMARY KEY, name VARCHAR(50) NOT NULL, description VARCHAR(200));
drop.students.table = DROP TABLE if exists students cascade;
create.students.table = CREATE TABLE students (id SERIAL NOT NULL PRIMARY KEY, group_id INT, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL);
drop.students.courses.table = DROP TABLE students_courses;
create.students.courses.table = CREATE TABLE students_courses (student_id INT REFERENCES students (id), course_id INT REFERENCES courses (id));
create.courses.table.h2.database = CREATE TABLE courses (id INT auto_increment NOT NULL PRIMARY KEY, name VARCHAR(50) NOT NULL, description VARCHAR(200));
create.groups.table.h2.database = CREATE TABLE groups (id INT auto_increment NOT NULL PRIMARY KEY, name VARCHAR(50) NOT NULL);
create.students.table.h2.database = CREATE TABLE students (id INT auto_increment NOT NULL PRIMARY KEY, group_id INT, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL);